#!/usr/bin/perl

package eBay::API::XML::DataType::Enum::TicketEventTypeCodeType;

use strict;
use warnings;  

##########################################################################
#
# Module: ............... <user defined location>eBay/API/XML
# File: ................. TicketEventTypeCodeType.pm
# Generated by: ......... genEBayApiDataTypes.pl
# Last Generated: ....... 08/24/2008 16:44
# API Release Number: ... 579
#
##########################################################################  

=head1 NAME

eBay::API::XML::DataType::Enum::TicketEventTypeCodeType

=head1 DESCRIPTION

Supported event ticket types.



=head1 SYNOPSIS

=cut



=head1 Enums:

=cut


=head2 Any

(in) Any event (applicable to US, UK, and DE)



=cut


use constant Any => scalar('Any');


=head2 DE_ComedyAndKabarett

(in) Comedy & Kabarett (Comedy and Cabaret)



=cut


use constant DE_ComedyAndKabarett => scalar('DE_ComedyAndKabarett');


=head2 DE_FreizeitAndEvents

(in) Freizeit & Events (Leisure and Events)



=cut


use constant DE_FreizeitAndEvents => scalar('DE_FreizeitAndEvents');


=head2 DE_KonzerteAndFestivals

(in) Konzerte & Festivals (Concerts and Festivals)



=cut


use constant DE_KonzerteAndFestivals => scalar('DE_KonzerteAndFestivals');


=head2 DE_KulturAndKlassik

(in) Kultur & Klassik (Culture and Classical)



=cut


use constant DE_KulturAndKlassik => scalar('DE_KulturAndKlassik');


=head2 DE_MusicalsAndShows

(in) Musicals & Shows



=cut


use constant DE_MusicalsAndShows => scalar('DE_MusicalsAndShows');


=head2 DE_Sportveranstaltungen

(in) Sportveranstaltungen (Sporting Events)



=cut


use constant DE_Sportveranstaltungen => scalar('DE_Sportveranstaltungen');


=head2 DE_Sonstige

(in) Other events that are not the above Germany event types
(applicable to listings on the DE site)



=cut


use constant DE_Sonstige => scalar('DE_Sonstige');


=head2 UK_AmusementParks

(in) Amusement Parks (applicable to listings on the UK site)



=cut


use constant UK_AmusementParks => scalar('UK_AmusementParks');


=head2 UK_Comedy

(in) Comedy (applicable to listings on the UK site)



=cut


use constant UK_Comedy => scalar('UK_Comedy');


=head2 UK_ConcertsAndGigs

(in) Concerts/Gigs (applicable to listings on the UK site)



=cut


use constant UK_ConcertsAndGigs => scalar('UK_ConcertsAndGigs');


=head2 UK_ConferencesAndSeminars

(in) Conferences/Seminars (applicable to listings on the UK site)



=cut


use constant UK_ConferencesAndSeminars => scalar('UK_ConferencesAndSeminars');


=head2 UK_ExhibitionsAndShows

(in) Exhibitions/Shows (applicable to listings on the UK site)



=cut


use constant UK_ExhibitionsAndShows => scalar('UK_ExhibitionsAndShows');


=head2 UK_Experiences

(in) Experiences (applicable to listings on the UK site)



=cut


use constant UK_Experiences => scalar('UK_Experiences');


=head2 UK_SportingEvents

(in) Sporting events (applicable to listings on the UK site)



=cut


use constant UK_SportingEvents => scalar('UK_SportingEvents');


=head2 UK_TheatreCinemaAndCircus

(in) Theatre/Cinema/Circus (applicable to listings on the UK site)



=cut


use constant UK_TheatreCinemaAndCircus => scalar('UK_TheatreCinemaAndCircus');


=head2 UK_Other

(in) Other. Events that are not the above UK types
(applicable to listings on the UK site)



=cut


use constant UK_Other => scalar('UK_Other');


=head2 US_Concerts

(in) Concerts (applicable to listings on the US site)



=cut


use constant US_Concerts => scalar('US_Concerts');


=head2 US_Movies

(in) Movies (applicable to listings on the US site)



=cut


use constant US_Movies => scalar('US_Movies');


=head2 US_SportingEvents

(in) Sporting events (applicable to listings on the US site)



=cut


use constant US_SportingEvents => scalar('US_SportingEvents');


=head2 US_Theater

(in) Theater (applicable to listings on the US site)



=cut


use constant US_Theater => scalar('US_Theater');


=head2 US_Other

(in) Events that are not concerts,
movies, sporting events, or theater events
(applicable to listings on the US site)



=cut


use constant US_Other => scalar('US_Other');


=head2 CustomCode

Reserved for internal or future use.



=cut


use constant CustomCode => scalar('CustomCode');







1;   
