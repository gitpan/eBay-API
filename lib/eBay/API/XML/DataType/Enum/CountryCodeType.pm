#!/usr/bin/perl

package eBay::API::XML::DataType::Enum::CountryCodeType;

use strict;
use warnings;  

##########################################################################
#
# Module: ............... <user defined location>eBay/API/XML
# File: ................. CountryCodeType.pm
# Generated by: ......... genEBayApiDataTypes.pl
# Last Generated: ....... 08/24/2008 16:44
# API Release Number: ... 579
#
##########################################################################  

=head1 NAME

eBay::API::XML::DataType::Enum::CountryCodeType

=head1 DESCRIPTION

Defines the standard 2-letter ISO 3166 country code set, plus
some additional country codes that eBay uses.
(The additional codes appear at the end of this code list and
are noted as non-ISO.)
For English names that correspond to each code (e.g., KY="Cayman Islands"),
call GeteBayDetails or see the ISO site:
http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html



=head1 SYNOPSIS

=cut



=head1 Enums:

=cut


=head2 AF

=cut


use constant AF => scalar('AF');


=head2 AL

=cut


use constant AL => scalar('AL');


=head2 DZ

=cut


use constant DZ => scalar('DZ');


=head2 AS

=cut


use constant AS => scalar('AS');


=head2 AD

=cut


use constant AD => scalar('AD');


=head2 AO

=cut


use constant AO => scalar('AO');


=head2 AI

=cut


use constant AI => scalar('AI');


=head2 AQ

=cut


use constant AQ => scalar('AQ');


=head2 AG

=cut


use constant AG => scalar('AG');


=head2 AR

=cut


use constant AR => scalar('AR');


=head2 AM

=cut


use constant AM => scalar('AM');


=head2 AW

=cut


use constant AW => scalar('AW');


=head2 AU

=cut


use constant AU => scalar('AU');


=head2 AT

=cut


use constant AT => scalar('AT');


=head2 AZ

=cut


use constant AZ => scalar('AZ');


=head2 BS

=cut


use constant BS => scalar('BS');


=head2 BH

=cut


use constant BH => scalar('BH');


=head2 BD

=cut


use constant BD => scalar('BD');


=head2 BB

=cut


use constant BB => scalar('BB');


=head2 BY

=cut


use constant BY => scalar('BY');


=head2 BE

=cut


use constant BE => scalar('BE');


=head2 BZ

=cut


use constant BZ => scalar('BZ');


=head2 BJ

=cut


use constant BJ => scalar('BJ');


=head2 BM

=cut


use constant BM => scalar('BM');


=head2 BT

=cut


use constant BT => scalar('BT');


=head2 BO

=cut


use constant BO => scalar('BO');


=head2 BA

=cut


use constant BA => scalar('BA');


=head2 BW

=cut


use constant BW => scalar('BW');


=head2 BV

=cut


use constant BV => scalar('BV');


=head2 BR

=cut


use constant BR => scalar('BR');


=head2 IO

=cut


use constant IO => scalar('IO');


=head2 BN

=cut


use constant BN => scalar('BN');


=head2 BG

=cut


use constant BG => scalar('BG');


=head2 BF

=cut


use constant BF => scalar('BF');


=head2 BI

=cut


use constant BI => scalar('BI');


=head2 KH

=cut


use constant KH => scalar('KH');


=head2 CM

=cut


use constant CM => scalar('CM');


=head2 CA

=cut


use constant CA => scalar('CA');


=head2 CV

=cut


use constant CV => scalar('CV');


=head2 KY

=cut


use constant KY => scalar('KY');


=head2 CF

=cut


use constant CF => scalar('CF');


=head2 TD

=cut


use constant TD => scalar('TD');


=head2 CL

=cut


use constant CL => scalar('CL');


=head2 CN

=cut


use constant CN => scalar('CN');


=head2 CX

=cut


use constant CX => scalar('CX');


=head2 CC

=cut


use constant CC => scalar('CC');


=head2 CO

=cut


use constant CO => scalar('CO');


=head2 KM

=cut


use constant KM => scalar('KM');


=head2 CG

=cut


use constant CG => scalar('CG');


=head2 CD

=cut


use constant CD => scalar('CD');


=head2 CK

=cut


use constant CK => scalar('CK');


=head2 CR

=cut


use constant CR => scalar('CR');


=head2 CI

=cut


use constant CI => scalar('CI');


=head2 HR

=cut


use constant HR => scalar('HR');


=head2 CU

=cut


use constant CU => scalar('CU');


=head2 CY

=cut


use constant CY => scalar('CY');


=head2 CZ

=cut


use constant CZ => scalar('CZ');


=head2 DK

=cut


use constant DK => scalar('DK');


=head2 DJ

=cut


use constant DJ => scalar('DJ');


=head2 DM

=cut


use constant DM => scalar('DM');


=head2 DO

=cut


use constant DO => scalar('DO');


=head2 TP

=cut


use constant TP => scalar('TP');


=head2 EC

=cut


use constant EC => scalar('EC');


=head2 EG

=cut


use constant EG => scalar('EG');


=head2 SV

=cut


use constant SV => scalar('SV');


=head2 GQ

=cut


use constant GQ => scalar('GQ');


=head2 ER

=cut


use constant ER => scalar('ER');


=head2 EE

=cut


use constant EE => scalar('EE');


=head2 ET

=cut


use constant ET => scalar('ET');


=head2 FK

=cut


use constant FK => scalar('FK');


=head2 FO

=cut


use constant FO => scalar('FO');


=head2 FJ

=cut


use constant FJ => scalar('FJ');


=head2 FI

=cut


use constant FI => scalar('FI');


=head2 FR

=cut


use constant FR => scalar('FR');


=head2 GF

=cut


use constant GF => scalar('GF');


=head2 PF

French Polynesia. Includes Tahiti.



=cut


use constant PF => scalar('PF');


=head2 TF

=cut


use constant TF => scalar('TF');


=head2 GA

=cut


use constant GA => scalar('GA');


=head2 GM

=cut


use constant GM => scalar('GM');


=head2 GE

=cut


use constant GE => scalar('GE');


=head2 DE

=cut


use constant DE => scalar('DE');


=head2 GH

=cut


use constant GH => scalar('GH');


=head2 GI

=cut


use constant GI => scalar('GI');


=head2 GR

=cut


use constant GR => scalar('GR');


=head2 GL

=cut


use constant GL => scalar('GL');


=head2 GD

=cut


use constant GD => scalar('GD');


=head2 GP

=cut


use constant GP => scalar('GP');


=head2 GU

=cut


use constant GU => scalar('GU');


=head2 GT

=cut


use constant GT => scalar('GT');


=head2 GN

=cut


use constant GN => scalar('GN');


=head2 GW

=cut


use constant GW => scalar('GW');


=head2 GY

=cut


use constant GY => scalar('GY');


=head2 HT

=cut


use constant HT => scalar('HT');


=head2 HM

=cut


use constant HM => scalar('HM');


=head2 VA

=cut


use constant VA => scalar('VA');


=head2 HN

=cut


use constant HN => scalar('HN');


=head2 HK

=cut


use constant HK => scalar('HK');


=head2 HU

=cut


use constant HU => scalar('HU');


=head2 IS

=cut


use constant IS => scalar('IS');


=head2 IN

=cut


use constant IN => scalar('IN');


=head2 ID

=cut


use constant ID => scalar('ID');


=head2 IR

=cut


use constant IR => scalar('IR');


=head2 IQ

=cut


use constant IQ => scalar('IQ');


=head2 IE

=cut


use constant IE => scalar('IE');


=head2 IL

=cut


use constant IL => scalar('IL');


=head2 IT

=cut


use constant IT => scalar('IT');


=head2 JM

=cut


use constant JM => scalar('JM');


=head2 JP

=cut


use constant JP => scalar('JP');


=head2 JO

=cut


use constant JO => scalar('JO');


=head2 KZ

=cut


use constant KZ => scalar('KZ');


=head2 KE

=cut


use constant KE => scalar('KE');


=head2 KI

=cut


use constant KI => scalar('KI');


=head2 KP

=cut


use constant KP => scalar('KP');


=head2 KR

=cut


use constant KR => scalar('KR');


=head2 KW

=cut


use constant KW => scalar('KW');


=head2 KG

=cut


use constant KG => scalar('KG');


=head2 LA

=cut


use constant LA => scalar('LA');


=head2 LV

=cut


use constant LV => scalar('LV');


=head2 LB

=cut


use constant LB => scalar('LB');


=head2 LS

=cut


use constant LS => scalar('LS');


=head2 LR

=cut


use constant LR => scalar('LR');


=head2 LY

=cut


use constant LY => scalar('LY');


=head2 LI

=cut


use constant LI => scalar('LI');


=head2 LT

=cut


use constant LT => scalar('LT');


=head2 LU

=cut


use constant LU => scalar('LU');


=head2 MO

=cut


use constant MO => scalar('MO');


=head2 MK

=cut


use constant MK => scalar('MK');


=head2 MG

=cut


use constant MG => scalar('MG');


=head2 MW

=cut


use constant MW => scalar('MW');


=head2 MY

=cut


use constant MY => scalar('MY');


=head2 MV

=cut


use constant MV => scalar('MV');


=head2 ML

=cut


use constant ML => scalar('ML');


=head2 MT

=cut


use constant MT => scalar('MT');


=head2 MH

=cut


use constant MH => scalar('MH');


=head2 MQ

=cut


use constant MQ => scalar('MQ');


=head2 MR

=cut


use constant MR => scalar('MR');


=head2 MU

=cut


use constant MU => scalar('MU');


=head2 YT

=cut


use constant YT => scalar('YT');


=head2 MX

=cut


use constant MX => scalar('MX');


=head2 FM

=cut


use constant FM => scalar('FM');


=head2 MD

=cut


use constant MD => scalar('MD');


=head2 MC

=cut


use constant MC => scalar('MC');


=head2 MN

=cut


use constant MN => scalar('MN');


=head2 MS

=cut


use constant MS => scalar('MS');


=head2 MA

=cut


use constant MA => scalar('MA');


=head2 MZ

=cut


use constant MZ => scalar('MZ');


=head2 MM

=cut


use constant MM => scalar('MM');


=head2 NA

=cut


use constant NA => scalar('NA');


=head2 NR

=cut


use constant NR => scalar('NR');


=head2 NP

=cut


use constant NP => scalar('NP');


=head2 NL

=cut


use constant NL => scalar('NL');


=head2 AN

=cut


use constant AN => scalar('AN');


=head2 NC

=cut


use constant NC => scalar('NC');


=head2 NZ

=cut


use constant NZ => scalar('NZ');


=head2 NI

=cut


use constant NI => scalar('NI');


=head2 NE

=cut


use constant NE => scalar('NE');


=head2 NG

=cut


use constant NG => scalar('NG');


=head2 NU

=cut


use constant NU => scalar('NU');


=head2 NF

=cut


use constant NF => scalar('NF');


=head2 MP

=cut


use constant MP => scalar('MP');


=head2 NO

=cut


use constant NO => scalar('NO');


=head2 OM

=cut


use constant OM => scalar('OM');


=head2 PK

=cut


use constant PK => scalar('PK');


=head2 PW

=cut


use constant PW => scalar('PW');


=head2 PS

=cut


use constant PS => scalar('PS');


=head2 PA

=cut


use constant PA => scalar('PA');


=head2 PG

=cut


use constant PG => scalar('PG');


=head2 PY

=cut


use constant PY => scalar('PY');


=head2 PE

=cut


use constant PE => scalar('PE');


=head2 PH

=cut


use constant PH => scalar('PH');


=head2 PN

=cut


use constant PN => scalar('PN');


=head2 PL

=cut


use constant PL => scalar('PL');


=head2 PT

=cut


use constant PT => scalar('PT');


=head2 PR

=cut


use constant PR => scalar('PR');


=head2 QA

=cut


use constant QA => scalar('QA');


=head2 RE

=cut


use constant RE => scalar('RE');


=head2 RO

=cut


use constant RO => scalar('RO');


=head2 RU

=cut


use constant RU => scalar('RU');


=head2 RW

=cut


use constant RW => scalar('RW');


=head2 SH

=cut


use constant SH => scalar('SH');


=head2 KN

=cut


use constant KN => scalar('KN');


=head2 LC

=cut


use constant LC => scalar('LC');


=head2 PM

=cut


use constant PM => scalar('PM');


=head2 VC

=cut


use constant VC => scalar('VC');


=head2 WS

=cut


use constant WS => scalar('WS');


=head2 SM

=cut


use constant SM => scalar('SM');


=head2 ST

=cut


use constant ST => scalar('ST');


=head2 SA

=cut


use constant SA => scalar('SA');


=head2 SN

=cut


use constant SN => scalar('SN');


=head2 SC

=cut


use constant SC => scalar('SC');


=head2 SL

=cut


use constant SL => scalar('SL');


=head2 SG

=cut


use constant SG => scalar('SG');


=head2 SK

=cut


use constant SK => scalar('SK');


=head2 SI

=cut


use constant SI => scalar('SI');


=head2 SB

=cut


use constant SB => scalar('SB');


=head2 SO

=cut


use constant SO => scalar('SO');


=head2 ZA

=cut


use constant ZA => scalar('ZA');


=head2 GS

=cut


use constant GS => scalar('GS');


=head2 ES

=cut


use constant ES => scalar('ES');


=head2 LK

=cut


use constant LK => scalar('LK');


=head2 SD

=cut


use constant SD => scalar('SD');


=head2 SR

=cut


use constant SR => scalar('SR');


=head2 SJ

=cut


use constant SJ => scalar('SJ');


=head2 SZ

=cut


use constant SZ => scalar('SZ');


=head2 SE

=cut


use constant SE => scalar('SE');


=head2 CH

=cut


use constant CH => scalar('CH');


=head2 SY

=cut


use constant SY => scalar('SY');


=head2 TW

=cut


use constant TW => scalar('TW');


=head2 TJ

=cut


use constant TJ => scalar('TJ');


=head2 TZ

=cut


use constant TZ => scalar('TZ');


=head2 TH

=cut


use constant TH => scalar('TH');


=head2 TG

=cut


use constant TG => scalar('TG');


=head2 TK

=cut


use constant TK => scalar('TK');


=head2 TO

=cut


use constant TO => scalar('TO');


=head2 TT

=cut


use constant TT => scalar('TT');


=head2 TN

=cut


use constant TN => scalar('TN');


=head2 TR

=cut


use constant TR => scalar('TR');


=head2 TM

=cut


use constant TM => scalar('TM');


=head2 TC

=cut


use constant TC => scalar('TC');


=head2 TV

=cut


use constant TV => scalar('TV');


=head2 UG

=cut


use constant UG => scalar('UG');


=head2 UA

=cut


use constant UA => scalar('UA');


=head2 AE

=cut


use constant AE => scalar('AE');


=head2 GB

=cut


use constant GB => scalar('GB');


=head2 US

=cut


use constant US => scalar('US');


=head2 UM

=cut


use constant UM => scalar('UM');


=head2 UY

=cut


use constant UY => scalar('UY');


=head2 UZ

=cut


use constant UZ => scalar('UZ');


=head2 VU

=cut


use constant VU => scalar('VU');


=head2 VE

=cut


use constant VE => scalar('VE');


=head2 VN

=cut


use constant VN => scalar('VN');


=head2 VG

=cut


use constant VG => scalar('VG');


=head2 VI

=cut


use constant VI => scalar('VI');


=head2 WF

=cut


use constant WF => scalar('WF');


=head2 EH

=cut


use constant EH => scalar('EH');


=head2 YE

=cut


use constant YE => scalar('YE');


=head2 YU

=cut


use constant YU => scalar('YU');


=head2 ZM

=cut


use constant ZM => scalar('ZM');


=head2 ZW

=cut


use constant ZW => scalar('ZW');


=head2 AA

NOTE: APO/FPO was defined in eBay list previously
but they are not defined in ISO 3166. This country
will remain on eBay country code list for backward
compatibility.



=cut


use constant AA => scalar('AA');


=head2 QM

NOTE: Guernsey was defined in eBay list previously
but they are not defined in ISO 3166. This country
will remain on eBay country list for backward
compatibility.



=cut


use constant QM => scalar('QM');


=head2 QN

NOTE: Jan Mayen was defined in eBay list previously
but they are not defined in ISO 3166. This country
will remain on eBay country list for backward
compatibility.



=cut


use constant QN => scalar('QN');


=head2 QO

NOTE: Jersey was defined in eBay list previously
but they are not defined in ISO 3166. This country
will remain on eBay country list for backward
compatibility.



=cut


use constant QO => scalar('QO');


=head2 QP

NOTE: Tahiti was defined in eBay list previously
but they are not defined in ISO 3166. This country
will remain on eBay country list for backward
compatibility. This Code is currently deprecated



=cut


use constant QP => scalar('QP');


=head2 JE

Jersey



=cut


use constant JE => scalar('JE');


=head2 GG

Guernsey



=cut


use constant GG => scalar('GG');


=head2 ZZ

Unknown country



=cut


use constant ZZ => scalar('ZZ');


=head2 RS

Serbia



=cut


use constant RS => scalar('RS');


=head2 ME

Montenegro



=cut


use constant ME => scalar('ME');


=head2 CustomCode

(out) Reserved for internal or future use



=cut


use constant CustomCode => scalar('CustomCode');







1;   
