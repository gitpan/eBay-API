#!/usr/bin/perl

package eBay::API::XML::DataType::Enum::ShippingPackageCodeType;

use strict;
use warnings;  

##########################################################################
#
# Module: ............... <user defined location>eBay/API/XML
# File: ................. ShippingPackageCodeType.pm
# Generated by: ......... genEBayApiDataTypes.pl
# Last Generated: ....... 08/24/2008 16:44
# API Release Number: ... 579
#
##########################################################################  

=head1 NAME

eBay::API::XML::DataType::Enum::ShippingPackageCodeType

=head1 DESCRIPTION

The nature of the package used to ship the item(s).
Required for calculated shipping only. Not all package types
are supported by a specific shipping service (ShippingServiceCodeType).



=head1 SYNOPSIS

=cut



=head1 Enums:

=cut


=head2 None

None



=cut


use constant None => scalar('None');


=head2 Letter

Letter



=cut


use constant Letter => scalar('Letter');


=head2 LargeEnvelope

LargeEnvelope



=cut


use constant LargeEnvelope => scalar('LargeEnvelope');


=head2 USPSLargePack

USPS Large Package/Oversize 1



=cut


use constant USPSLargePack => scalar('USPSLargePack');


=head2 VeryLargePack

Very Large Package/Oversize 2



=cut


use constant VeryLargePack => scalar('VeryLargePack');


=head2 ExtraLargePack

Extra Large Package/Oversize 3



=cut


use constant ExtraLargePack => scalar('ExtraLargePack');


=head2 UPSLetter

UPS Letter



=cut


use constant UPSLetter => scalar('UPSLetter');


=head2 USPSFlatRateEnvelope

USPS Flat Rate Envelope



=cut


use constant USPSFlatRateEnvelope => scalar('USPSFlatRateEnvelope');


=head2 PackageThickEnvelope

Package/thick envelope



=cut


use constant PackageThickEnvelope => scalar('PackageThickEnvelope');


=head2 Roll

Roll



=cut


use constant Roll => scalar('Roll');


=head2 Europallet

Europallet



=cut


use constant Europallet => scalar('Europallet');


=head2 OneWayPallet

Onewaypallet



=cut


use constant OneWayPallet => scalar('OneWayPallet');


=head2 BulkyGoods

Bulky goods



=cut


use constant BulkyGoods => scalar('BulkyGoods');


=head2 Furniture

Furniture



=cut


use constant Furniture => scalar('Furniture');


=head2 Cars

Cars



=cut


use constant Cars => scalar('Cars');


=head2 Motorbikes

Motorbikes



=cut


use constant Motorbikes => scalar('Motorbikes');


=head2 Caravan

Caravan



=cut


use constant Caravan => scalar('Caravan');


=head2 IndustryVehicles

Industry vehicles



=cut


use constant IndustryVehicles => scalar('IndustryVehicles');


=head2 ParcelOrPaddedEnvelope

Parcel or padded Envelope



=cut


use constant ParcelOrPaddedEnvelope => scalar('ParcelOrPaddedEnvelope');


=head2 SmallCanadaPostBox

Small Canada Post Box



=cut


use constant SmallCanadaPostBox => scalar('SmallCanadaPostBox');


=head2 MediumCanadaPostBox

Medium Canada Post Box



=cut


use constant MediumCanadaPostBox => scalar('MediumCanadaPostBox');


=head2 LargeCanadaPostBox

Large Canada Post Box



=cut


use constant LargeCanadaPostBox => scalar('LargeCanadaPostBox');


=head2 SmallCanadaPostBubbleMailer

Small Canada Post Bubble Mailer



=cut


use constant SmallCanadaPostBubbleMailer => scalar('SmallCanadaPostBubbleMailer');


=head2 MediumCanadaPostBubbleMailer

Medium Canada Post Bubble Mailer



=cut


use constant MediumCanadaPostBubbleMailer => scalar('MediumCanadaPostBubbleMailer');


=head2 LargeCanadaPostBubbleMailer

Large Canada Post Bubble Mailer



=cut


use constant LargeCanadaPostBubbleMailer => scalar('LargeCanadaPostBubbleMailer');


=head2 PaddedBags

Padded Bags



=cut


use constant PaddedBags => scalar('PaddedBags');


=head2 ToughBags

Tough Bags



=cut


use constant ToughBags => scalar('ToughBags');


=head2 ExpandableToughBags

Expandable Tough Bags



=cut


use constant ExpandableToughBags => scalar('ExpandableToughBags');


=head2 MailingBoxes

Mailing Boxes



=cut


use constant MailingBoxes => scalar('MailingBoxes');


=head2 Winepak

Winepak



=cut


use constant Winepak => scalar('Winepak');


=head2 CustomCode

Reserved for internal or future use.



=cut


use constant CustomCode => scalar('CustomCode');







1;   
