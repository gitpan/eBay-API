#!/usr/bin/perl

package eBay::API::XML::Call::GetStoreCategoryUpdateStatus;

use strict;
use warnings;  

##########################################################################
#
# Module: ............... <user defined location>eBay/API/XML
# File: ................. GetStoreCategoryUpdateStatus.pm
# Generated by: ......... genEBayApiDataTypes.pl
# Last Generated: ....... 08/24/2008 16:44
# API Release Number: ... 579
#
##########################################################################  

=head1 NAME

eBay::API::XML::Call::GetStoreCategoryUpdateStatus

=head1 DESCRIPTION



=head1 SYNOPSIS

=cut


=head1 INHERITANCE

eBay::API::XML::Call::GetStoreCategoryUpdateStatus inherits from the L<eBay::API::XML::BaseCall> class

=cut

use eBay::API::XML::BaseCall;
our @ISA = ("eBay::API::XML::BaseCall");

use eBay::API::XML::Call::GetStoreCategoryUpdateStatus::GetStoreCategoryUpdateStatusRequestType;
use eBay::API::XML::Call::GetStoreCategoryUpdateStatus::GetStoreCategoryUpdateStatusResponseType;


=head1 Subroutines:

=cut

sub getApiCallName {
   return 'GetStoreCategoryUpdateStatus';
}
sub getRequestDataTypeFullPackage {
   return 'eBay::API::XML::Call::GetStoreCategoryUpdateStatus::GetStoreCategoryUpdateStatusRequestType';
}
sub getResponseDataTypeFullPackage {
   return 'eBay::API::XML::Call::GetStoreCategoryUpdateStatus::GetStoreCategoryUpdateStatusResponseType';
}

#
# input properties
#

=head2 setTaskID()

The task ID returned by the SetStoreCategories call. If the
SetStoreCategories call was processed asynchronously, the TaskID will be
a positive number, otherwise the TaskID will be 0.

  RequiredInput: Yes
#    Argument: 'xs:long'

=cut
       
sub setTaskID {
   my $self   = shift;
   my $sTaskID = shift;
   $self->getRequestDataType()->setTaskID($sTaskID);
}



#
# output properties
#

=head2 getStatus()

The status (Pending, InProgress, Complete, or Failed) of an update to the 
store category structure.

  Returned: Always
#    Returns: 'ns:TaskStatusCodeType'

=cut
       
sub getStatus {
   my $self = shift;
   return $self->getResponseDataType()->getStatus();
}





1;   
