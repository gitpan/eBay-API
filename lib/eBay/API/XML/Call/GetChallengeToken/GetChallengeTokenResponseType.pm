#!/usr/bin/perl

package eBay::API::XML::Call::GetChallengeToken::GetChallengeTokenResponseType;

use strict;
use warnings;  

##########################################################################
#
# Module: ............... <user defined location>eBay/API/XML
# File: ................. GetChallengeTokenResponseType.pm
# Generated by: ......... genEBayApiDataTypes.pl
# Last Generated: ....... 08/24/2008 16:44
# API Release Number: ... 579
#
##########################################################################  

=head1 NAME

eBay::API::XML::Call::GetChallengeToken::GetChallengeTokenResponseType

=head1 DESCRIPTION

Response to GetChallengeToken request.



=head1 SYNOPSIS

=cut


=head1 INHERITANCE

eBay::API::XML::Call::GetChallengeToken::GetChallengeTokenResponseType inherits from the L<eBay::API::XML::ResponseDataType> class

=cut

use eBay::API::XML::ResponseDataType;
our @ISA = ("eBay::API::XML::ResponseDataType");



my @gaProperties = ( [ 'AudioChallengeURL', 'xs:string', '', '', '' ]
	, [ 'ChallengeToken', 'xs:string', '', '', '' ]
	, [ 'ImageChallengeURL', 'xs:string', '', '', '' ]
                    );
push @gaProperties, @{eBay::API::XML::ResponseDataType::getPropertiesList()};

my @gaAttributes = ( 
                    );
push @gaAttributes, @{eBay::API::XML::ResponseDataType::getAttributesList()};

=head1 Subroutines:

=cut

sub new {
  my $classname = shift;
  my %args = @_;
  my $self = $classname->SUPER::new(%args);
  return $self;
}

sub isScalar {
   return 0; 
}



=head2 setAudioChallengeURL()

The URL of the audio clip your application should provide for sight-impaired users.
The audio clip corresponds to the image.

#    Argument: 'xs:string'

=cut

sub setAudioChallengeURL {
  my $self = shift;
  $self->{'AudioChallengeURL'} = shift
}

=head2 getAudioChallengeURL()

  Returned: Always
#    Returns: 'xs:string'

=cut

sub getAudioChallengeURL {
  my $self = shift;
  return $self->{'AudioChallengeURL'};
}


=head2 setChallengeToken()

Botblock token that is used to validate that the user is a human and not a bot.

#    Argument: 'xs:string'

=cut

sub setChallengeToken {
  my $self = shift;
  $self->{'ChallengeToken'} = shift
}

=head2 getChallengeToken()

  Returned: Always
#    Returns: 'xs:string'

=cut

sub getChallengeToken {
  my $self = shift;
  return $self->{'ChallengeToken'};
}


=head2 setImageChallengeURL()

The URL of the image your application should display to
the user for a botblock challenge.

#    Argument: 'xs:string'

=cut

sub setImageChallengeURL {
  my $self = shift;
  $self->{'ImageChallengeURL'} = shift
}

=head2 getImageChallengeURL()

  Returned: Always
#    Returns: 'xs:string'

=cut

sub getImageChallengeURL {
  my $self = shift;
  return $self->{'ImageChallengeURL'};
}





##  Attribute and Property lists
sub getPropertiesList {
   my $self = shift;
   return \@gaProperties;
}

sub getAttributesList {
   my $self = shift;
   return \@gaAttributes;
}



1;   
